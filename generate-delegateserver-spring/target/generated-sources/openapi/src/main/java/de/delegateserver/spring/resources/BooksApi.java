/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package de.delegateserver.spring.resources;

import de.delegateserver.spring.model.Book;
import de.delegateserver.spring.model.BookInformation;
import de.delegateserver.spring.model.BookInformationList;
import java.util.UUID;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-01-16T16:49:36.702674800+01:00[Europe/Berlin]")
@Validated
@Api(value = "books", description = "the books API")
public interface BooksApi {

    default BooksApiDelegate getDelegate() {
        return new BooksApiDelegate() {};
    }

    /**
     * DELETE /books/{bookId} : Delete a book from the storage
     * Delete a book from the storage
     *
     * @param bookId UUID of the book (required)
     * @return no content (status code 204)
     *         or Bad Request: if the request cannot be processed due to a client error.    For example:    - invalid request syntax   - semantical error in request, like:     - invalid reference in request data (for instance bookId refers to a Book that does not exist)     - missing field that is required (status code 400)
     */

    @ApiOperation(value = "Delete a book from the storage", nickname = "booksBookIdDelete", notes = "Delete a book from the storage", tags={ "Books", })
    @ApiResponses(value = { 

        @ApiResponse(code = 204, message = "no content"),

        @ApiResponse(code = 400, message = "Bad Request: if the request cannot be processed due to a client error.    For example:    - invalid request syntax   - semantical error in request, like:     - invalid reference in request data (for instance bookId refers to a Book that does not exist)     - missing field that is required") })
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/books/{bookId}"
    )
    default ResponseEntity<Void> booksBookIdDelete(@ApiParam(value = "UUID of the book", required = true) @PathVariable("bookId") UUID bookId

) {
        return getDelegate().booksBookIdDelete(bookId);
    }


    /**
     * GET /books/{bookId} : Fetch a book by its bookId
     * Fetch a book by its bookId
     *
     * @param bookId UUID of the book (required)
     * @return OK (status code 200)
     *         or Bad Request: if the request cannot be processed due to a client error.    For example:    - invalid request syntax   - semantical error in request, like:     - invalid reference in request data (for instance bookId refers to a Book that does not exist)     - missing field that is required (status code 400)
     */

    @ApiOperation(value = "Fetch a book by its bookId", nickname = "booksBookIdGet", notes = "Fetch a book by its bookId", response = Book.class, tags={ "Books", })
    @ApiResponses(value = { 

        @ApiResponse(code = 200, message = "OK", response = Book.class),

        @ApiResponse(code = 400, message = "Bad Request: if the request cannot be processed due to a client error.    For example:    - invalid request syntax   - semantical error in request, like:     - invalid reference in request data (for instance bookId refers to a Book that does not exist)     - missing field that is required") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/books/{bookId}",
        produces = { "application/json" }
    )
    default ResponseEntity<Book> booksBookIdGet(@ApiParam(value = "UUID of the book", required = true) @PathVariable("bookId") UUID bookId

) {
        return getDelegate().booksBookIdGet(bookId);
    }


    /**
     * GET /books : Fetch a list of information about the books in your storage
     * Find the information about the books in your storage, maybe filtered by title, author or year.
     *
     * @param title Title of the book (optional)
     * @param author Author of the book (optional)
     * @param year Year the book was published (optional)
     * @return OK (status code 200)
     *         or Bad Request: if the request cannot be processed due to a client error.    For example:    - invalid request syntax   - semantical error in request, like:     - invalid reference in request data (for instance bookId refers to a Book that does not exist)     - missing field that is required (status code 400)
     */

    @ApiOperation(value = "Fetch a list of information about the books in your storage", nickname = "booksGet", notes = "Find the information about the books in your storage, maybe filtered by title, author or year.", response = BookInformationList.class, tags={ "Books", })
    @ApiResponses(value = { 

        @ApiResponse(code = 200, message = "OK", response = BookInformationList.class),

        @ApiResponse(code = 400, message = "Bad Request: if the request cannot be processed due to a client error.    For example:    - invalid request syntax   - semantical error in request, like:     - invalid reference in request data (for instance bookId refers to a Book that does not exist)     - missing field that is required") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/books",
        produces = { "application/json" }
    )
    default ResponseEntity<BookInformationList> booksGet(@ApiParam(value = "Title of the book") @Valid @RequestParam(value = "title", required = false) String title

,@ApiParam(value = "Author of the book") @Valid @RequestParam(value = "author", required = false) String author

,@ApiParam(value = "Year the book was published") @Valid @RequestParam(value = "year", required = false) Integer year

) {
        return getDelegate().booksGet(title, author, year);
    }


    /**
     * POST /books : Add a book to your storage
     * Add a book to your storage.
     *
     * @param book empty for now (optional)
     * @return created (status code 201)
     *         or Bad Request: if the request cannot be processed due to a client error.    For example:    - invalid request syntax   - semantical error in request, like:     - invalid reference in request data (for instance bookId refers to a Book that does not exist)     - missing field that is required (status code 400)
     */

    @ApiOperation(value = "Add a book to your storage", nickname = "booksPost", notes = "Add a book to your storage.", response = BookInformation.class, tags={ "Books", })
    @ApiResponses(value = { 

        @ApiResponse(code = 201, message = "created", response = BookInformation.class),

        @ApiResponse(code = 400, message = "Bad Request: if the request cannot be processed due to a client error.    For example:    - invalid request syntax   - semantical error in request, like:     - invalid reference in request data (for instance bookId refers to a Book that does not exist)     - missing field that is required") })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/books",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<BookInformation> booksPost(

@ApiParam(value = "empty for now" )   @Valid @RequestBody(required = false) Book book) {
        return getDelegate().booksPost(book);
    }

}
