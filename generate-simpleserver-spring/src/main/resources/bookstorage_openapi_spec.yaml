openapi: 3.0.3
info:
  title: Bookstorage API
  description: "empty for now"
  version: 0.0.1
tags:
  - name: Books
paths:
  /books:
    post:
      tags: [Books]
      summary: Add a book to your storage
      description: Add a book to your storage.
      requestBody:
        description: empty for now
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Book"
      responses:
        201:
          description: created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BookInformation"
        400:
          $ref: "#/components/responses/BadRequest"
    get:
      tags: [Books]
      summary: Fetch a list of information about the books in your storage
      description: Find the information about the books in your storage, maybe 
        filtered by title, author or year.
      parameters:
        - in: query
          name: title
          required: false
          description: Title of the book
          schema:
            type: string
        - in: query
          name: author
          required: false
          description: Author of the book
          schema:
            type: string
        - in: query
          name: year
          required: false
          description: Year the book was published
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BookInformationList"
        400:
          $ref: "#/components/responses/BadRequest"
                
  /books/{bookId}:
    get:
      tags: [Books]
      summary: Fetch a book by its bookId
      description: Fetch a book by its bookId
      parameters:
        - in: path
          name: bookId
          required: true
          schema:
            type: string
            format: uuid
          description: UUID of the book
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"
        400:
          $ref: "#/components/responses/BadRequest"
    delete:
      tags: [Books]
      summary: Delete a book from the storage
      description: Delete a book from the storage
      parameters:
        - in: path
          name: bookId
          required: true
          schema:
            type: string
            format: uuid
          description: UUID of the book
      responses:
        204:
          description: no content
        400:
          $ref: "#/components/responses/BadRequest"
          
components:
  schemas:
    Book:
      type: object
      description: Book
      required:
        - title
        - author
        - year
      properties:
        title:
          type: string
          description: Title of the book
        author:
          type: string
          description: Name of the author of the book
        year:
          type: integer
          format: int32
          description: The year the book was published
    BookInformation:
      type: object
      description: Simplified information for finding books in your storage
      required:
        - bookId
        - title
      properties:
        bookId:
          type: string
          format: uuid
          description: The UUID of the book in your storage
        title:
          type: string
          description: Title of the book
    BookInformationList:
      type: object
      description: List of BookInformations
      required:
        - data
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/BookInformation"
  responses:
    BadRequest:
      description: |-
        Bad Request: if the request cannot be processed due to a client error.

          For example:

          - invalid request syntax
          - semantical error in request, like:
            - invalid reference in request data (for instance bookId refers to a Book that does not exist)
            - missing field that is required
      